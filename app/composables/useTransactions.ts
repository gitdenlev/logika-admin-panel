import { ref, onMounted, watch, computed } from "vue";
import { useSupabaseUser, useSupabaseClient } from "#imports";
import JSConfetti from "js-confetti";

// –ì–∞—Ä–Ω–æ—é –ø—Ä–∞–∫—Ç–∏–∫–æ—é —î –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ –¥–ª—è –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö
interface Student {
  id: string | number;
  student_name: string;
  student_login: string;
  student_balance?: number;
}

interface StudentProfile {
  student_name: string;
  student_balance: number;
}

/**
 * Composable –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–∫–æ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.
 */
export function useTransactions() {
  const user = useSupabaseUser();
  const client = useSupabaseClient();
  let jsConfetti: JSConfetti;

  // --- –°—Ç–∞–Ω (State) ---
  const amount = ref<number | null>(null);
  const searchQuery = ref("");
  const selectedRecipient = ref<Student | null>(null);
  const studentsList = ref<Student[]>([]);
  const studentProfile = ref<StudentProfile | null>(null);
  const isLoading = ref(false);
  const transactionMessage = ref("");
  const transactionStatus = ref<"success" | "error" | "">("");
  const showSuccessView = ref(false);
  const randomMessage = ref("");

  // --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ---
  const quickAmounts = [1, 5, 10, 25, 50];
  const funnyMessages = [
    "üö´ –ë–∞–ª—ñ–≤ –º–∞–ª—É–≤–∞—Ç–æ‚Ä¶ –Ω–∞—á–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –ø—ñ—Å–ª—è –∑–∞—Ä–ø–ª–∞—Ç–∏ ü•≤",
    "üö´ –ú–∏ –± –ø–µ—Ä–µ–∫–∞–∑–∞–ª–∏, –∞–ª–µ –±–∞–ª–∞–Ω—Å —Å–∫–∞–∑–∞–≤: ¬´–ù—ñ¬ª üôÉ",
    "üö´ –ë–∞–ª–∞–Ω—Å –ø—Ä–æ—Å–∏—Ç—å –ø—ñ–¥–∑–∞—Ä—è–¥–∫–∏, —è–∫ —Ç–µ–ª–µ—Ñ–æ–Ω –∑ 1% üîã",
    "üö´ –£–ø—Å! –ù–∞ —Ä–∞—Ö—É–Ω–∫—É –ø—É—Å—Ç–æ, —è–∫ —É —à–∞—Ñ—ñ –ø—ñ—Å–ª—è –ø–µ—Ä–µ—ó–∑–¥—É üì¶",
    "üö´ –ù–µ –≤–∏—Å—Ç–∞—á–∞—î –±–∞–ª—ñ–≤‚Ä¶ –∞–ª–µ —î –≥–∞—Ä–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π üòÖ",
  ];

  // --- –ü—Ä–∏–≤–∞—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ ---
  function pickRandomMessage() {
    const index = Math.floor(Math.random() * funnyMessages.length);
    randomMessage.value = funnyMessages[index];
  }

  function clearTransactionMessage() {
    setTimeout(() => {
      transactionMessage.value = "";
      transactionStatus.value = "";
    }, 5000);
  }

  function clearSelection() {
    selectedRecipient.value = null;
    amount.value = null;
    transactionMessage.value = "";
    transactionStatus.value = "";
    showSuccessView.value = false;
  }

  // --- –ü—É–±–ª—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏ (–¥–æ—Å—Ç—É–ø–Ω—ñ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ) ---
  function selectRecipient(student: Student) {
    selectedRecipient.value = student;
    searchQuery.value = "";
    amount.value = null;
    transactionMessage.value = "";
    transactionStatus.value = "";
  }

  async function fetchStudentProfile() {
    if (user.value) {
      const { data, error } = await client
        .from("students")
        .select("student_name, student_balance")
        .eq("student_login", user.value.email)
        .single();

      if (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞:", error.message);
        studentProfile.value = null;
      } else {
        studentProfile.value = data;
      }
    }
  }

  async function fetchStudentsList() {
    const { data, error } = await client
      .from("students")
      .select("id, student_name, student_login");

    if (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤:", error.message);
    } else {
      studentsList.value =
        data?.filter((student) => student.student_login !== user.value?.email) ||
        [];
    }
  }

  async function sendTransaction() {
    if (
      !amount.value || amount.value <= 0 || !selectedRecipient.value || !studentProfile.value || !user.value
    ) {
      return;
    }

    if (amount.value > studentProfile.value.student_balance) {
      transactionMessage.value = "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É";
      transactionStatus.value = "error";
      clearTransactionMessage();
      return;
    }

    isLoading.value = true;

    try {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ RPC –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.
      // –¶–µ –Ω–∞–±–∞–≥–∞—Ç–æ –±–µ–∑–ø–µ—á–Ω—ñ—à–µ, –Ω—ñ–∂ –∫—ñ–ª—å–∫–∞ –æ–∫—Ä–µ–º–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤.
      const { error } = await client.rpc('transfer_balance', {
        sender_email: user.value.email,
        recipient_email: selectedRecipient.value.student_login,
        transfer_amount: amount.value,
      });

      if (error) throw error;

      // –Ø–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, –æ–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
      studentProfile.value.student_balance -= amount.value;

      showSuccessView.value = true;
      jsConfetti.addConfetti({
        emojis: ["üíú", "üéÅ", "ü™Ñ", "üå∏", "üõçÔ∏è", "üîÆ"],
        emojiSize: 80,
        confettiNumber: 40,
      });

      setTimeout(clearSelection, 3500);
    } catch (error: any) {
      console.error("–ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:", error);
      transactionMessage.value = error.details || error.message || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ª–æ–≥—ñ–∫—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.";
      transactionStatus.value = "error";
      clearTransactionMessage();
    } finally {
      isLoading.value = false;
    }
  }

  // --- –û–±—á–∏—Å–ª—é–≤–∞–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ (Computed) ---
  const filteredStudents = computed(() => {
    if (!searchQuery.value) return [];
    return studentsList.value.filter((student) =>
      student.student_name.toLowerCase().includes(searchQuery.value.toLowerCase())
    );
  });

  // --- –•—É–∫–∏ –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É —Ç–∞ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á—ñ ---
  onMounted(() => {
    jsConfetti = new JSConfetti();
    fetchStudentProfile();
    fetchStudentsList();
    pickRandomMessage();
  });

  watch(user, (newUser) => {
    if (newUser) {
      fetchStudentProfile();
      fetchStudentsList();
    }
  });

  watch(amount, (newVal) => {
    if (newVal && newVal > (studentProfile.value?.student_balance || 0)) {
      pickRandomMessage();
    }
  });

  // --- –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å–µ, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É ---
  return {
    amount,
    searchQuery,
    selectedRecipient,
    studentProfile,
    isLoading,
    transactionMessage,
    transactionStatus,
    showSuccessView,
    quickAmounts,
    randomMessage,
    filteredStudents,
    selectRecipient,
    sendTransaction,
  };
}
